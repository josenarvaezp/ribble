
// Code generated by ribble DO NOT EDIT.
// |\   \\\\__     o
// | \_/    o \    o 
// > _   (( <_  oo  
// | / \__+___/      
// |/     |/

package main

import (
	"context"
	"fmt"

	"github.com/aws/aws-lambda-go/lambda"
	log "github.com/sirupsen/logrus"

	"github.com/josenarvaezp/displ/pkg/lambdas"
)

var c *lambdas.Coordinator

func init() {
	// set logger
	log.SetLevel(log.ErrorLevel)

	var err error
	c, err = lambdas.NewCoordinator(true)
	if err != nil {
		log.WithError(err).Fatal("Error starting coordinator")
		return
	}
}

func HandleRequest(ctx context.Context, request lambdas.CoordinatorInput) error {
	// update coordinator
	c.UpdateCoordinatorWithRequest(ctx, request)

	// set coordinator logger
	coordinatorLogger := log.WithFields(log.Fields{
		"Job ID": c.JobID.String(),
	})

	// log init
	nextLogToken, _ := c.LogEvents(
		ctx,
		[]string{
			"Coordinator starting...",
			fmt.Sprintf("Waiting for %d mappers...", request.NumMappers),
		},
		nil, // empty token as it is the first log
	)

	// start mappers
	err := c.StartMappers(ctx, request.NumQueues, request.FunctionName)
	if err != nil {
		coordinatorLogger.WithError(err).Error("Error starting the mappers")
		return err
	}

	// waits until mappers are done
	nextLogToken, err = c.AreMappersDone(ctx, nextLogToken)
	if err != nil {
		coordinatorLogger.WithError(err).Error("Error reading mappers done queue")
		return err
	}

	// log mappers done
	nextLogToken, _ = c.LogEvents(
		ctx,
		[]string{
			"Mappers execution completed...",
			fmt.Sprintf("Waiting for %d reducers...", request.NumQueues),
		},
		nextLogToken,
	)

	// invoke reducers
	if err := c.InvokeReducers(ctx, "map_aggregator"); err != nil {
		coordinatorLogger.WithError(err).Error("Error invoking reducers")
		return nil
	}

	// wait until reducers are done
	nextLogToken, err = c.AreReducersDone(ctx, nextLogToken)
	if err != nil {
		coordinatorLogger.WithError(err).Error("Error reading reducers done queue")
		return err
	}

	// log reducers done
	nextLogToken, _ = c.LogEvents(
		ctx,
		[]string{
			"Reducers execution completed...",
			fmt.Sprintf(
				"Job completed successfully, output is available at the S3 bucket %s...",
				c.JobID.String(),
			),
		},
		nextLogToken,
	)

	// indicate reducers are done
	if err := c.WriteDoneObject(ctx, "done"); err != nil {
		coordinatorLogger.WithError(err).Error("Error writing done signal")
		return err
	}

	return nil
}

func main() {
	lambda.Start(HandleRequest)
}

