// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	lambda "github.com/aws/aws-sdk-go-v2/service/lambda"

	mock "github.com/stretchr/testify/mock"
)

// FaasAPI is an autogenerated mock type for the FaasAPI type
type FaasAPI struct {
	mock.Mock
}

// AddPermission provides a mock function with given fields: ctx, params, optFns
func (_m *FaasAPI) AddPermission(ctx context.Context, params *lambda.AddPermissionInput, optFns ...func(*lambda.Options)) (*lambda.AddPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.AddPermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddPermissionInput, ...func(*lambda.Options)) *lambda.AddPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddPermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lambda.AddPermissionInput, ...func(*lambda.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFunction provides a mock function with given fields: ctx, params, optFns
func (_m *FaasAPI) CreateFunction(ctx context.Context, params *lambda.CreateFunctionInput, optFns ...func(*lambda.Options)) (*lambda.CreateFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.CreateFunctionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionInput, ...func(*lambda.Options)) *lambda.CreateFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateFunctionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateFunctionInput, ...func(*lambda.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invoke provides a mock function with given fields: ctx, params, optFns
func (_m *FaasAPI) Invoke(ctx context.Context, params *lambda.InvokeInput, optFns ...func(*lambda.Options)) (*lambda.InvokeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.InvokeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeInput, ...func(*lambda.Options)) *lambda.InvokeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lambda.InvokeInput, ...func(*lambda.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFunctionConcurrency provides a mock function with given fields: ctx, params, optFns
func (_m *FaasAPI) PutFunctionConcurrency(ctx context.Context, params *lambda.PutFunctionConcurrencyInput, optFns ...func(*lambda.Options)) (*lambda.PutFunctionConcurrencyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.PutFunctionConcurrencyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionConcurrencyInput, ...func(*lambda.Options)) *lambda.PutFunctionConcurrencyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionConcurrencyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutFunctionConcurrencyInput, ...func(*lambda.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProvisionedConcurrencyConfig provides a mock function with given fields: ctx, params, optFns
func (_m *FaasAPI) PutProvisionedConcurrencyConfig(ctx context.Context, params *lambda.PutProvisionedConcurrencyConfigInput, optFns ...func(*lambda.Options)) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lambda.PutProvisionedConcurrencyConfigOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...func(*lambda.Options)) *lambda.PutProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutProvisionedConcurrencyConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...func(*lambda.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
