// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	lambdas "github.com/josenarvaezp/displ/pkg/lambdas"

	mock "github.com/stretchr/testify/mock"

	objectstore "github.com/josenarvaezp/displ/internal/objectstore"
)

// DriverInterface is an autogenerated mock type for the DriverInterface type
type DriverInterface struct {
	mock.Mock
}

// BuildDockerImages provides a mock function with given fields:
func (_m *DriverInterface) BuildDockerImages() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuildJobGenerationBinary provides a mock function with given fields:
func (_m *DriverInterface) BuildJobGenerationBinary() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJobBucket provides a mock function with given fields: ctx
func (_m *DriverInterface) CreateJobBucket(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateQueues provides a mock function with given fields: ctx, numQueues
func (_m *DriverInterface) CreateQueues(ctx context.Context, numQueues int) {
	_m.Called(ctx, numQueues)
}

// CreateUserPolicy provides a mock function with given fields: ctx, accountID
func (_m *DriverInterface) CreateUserPolicy(ctx context.Context, accountID string) (*string, error) {
	ret := _m.Called(ctx, accountID)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateMappingsCompleteObjects provides a mock function with given fields: ctx, inputBuckets
func (_m *DriverInterface) GenerateMappingsCompleteObjects(ctx context.Context, inputBuckets []*objectstore.Bucket) ([]*lambdas.Mapping, error) {
	ret := _m.Called(ctx, inputBuckets)

	var r0 []*lambdas.Mapping
	if rf, ok := ret.Get(0).(func(context.Context, []*objectstore.Bucket) []*lambdas.Mapping); ok {
		r0 = rf(ctx, inputBuckets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*lambdas.Mapping)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*objectstore.Bucket) error); ok {
		r1 = rf(ctx, inputBuckets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateResourcesFromBinary provides a mock function with given fields:
func (_m *DriverInterface) GenerateResourcesFromBinary() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartCoordinator provides a mock function with given fields: ctx, functionName, numMappers, numQueues
func (_m *DriverInterface) StartCoordinator(ctx context.Context, functionName string, numMappers int, numQueues int) error {
	ret := _m.Called(ctx, functionName, numMappers, numQueues)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) error); ok {
		r0 = rf(ctx, functionName, numMappers, numQueues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartMappers provides a mock function with given fields: ctx, mappings, functionName, region
func (_m *DriverInterface) StartMappers(ctx context.Context, mappings []*lambdas.Mapping, functionName string, region string) error {
	ret := _m.Called(ctx, mappings, functionName, region)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*lambdas.Mapping, string, string) error); ok {
		r0 = rf(ctx, mappings, functionName, region)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadMapper provides a mock function with given fields: ctx
func (_m *DriverInterface) UploadMapper(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
